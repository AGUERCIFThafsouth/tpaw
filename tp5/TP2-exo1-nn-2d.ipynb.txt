{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Un réseau MLP pour la classification en dimension 2\n",
    "\n",
    "Construit avec PyTorch, ce réseau va associer les coordonnées $(x, y)$ d'un point du plan à une classe.\n",
    "\n",
    "On va chercher à séparer les exemples de 4 classes (numérotées de 0 à 3).\n",
    "\n",
    "Le premier modèle, linéaire, permetra de se roder. On construira ensuite un réseau MPL avec deux couches cachées:\n",
    " * rétine de 2 neurones ($(x,y)$)\n",
    " * une couche linéaire + ReLu avec N1 neurones\n",
    " * une autre identique avec N2 neurones\n",
    " * une couche de sortie avec un neurone par class\n",
    " \n",
    "On utilisera comme coût l'entropie croisée (`CrossEntropyLoss`). \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Les données\n",
    "On lit un fichier CSV qui content 3 colonnes: $(x, y, c)$ où $c \\in \\{0, 1, 2, 3\\}$ indique la classe du point $(x,y)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                0           1          2\n",
      "count  200.000000  200.000000  200.00000\n",
      "mean     3.119035   -0.382835    1.50000\n",
      "std      5.395644    3.137519    1.12084\n",
      "min     -6.874860   -7.075802    0.00000\n",
      "25%      0.311461   -2.922907    0.75000\n",
      "50%      4.256648   -0.710461    1.50000\n",
      "75%      6.582249    2.412043    2.25000\n",
      "max     11.359325    5.753062    3.00000\n",
      "Nombre d'exemple 200\n",
      "Nombre de classes: 4\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Les données\n",
    "# Données : lecture d'un fichier CSV (créé par 00-gen2Ddata.ipynb)\n",
    "D = pd.read_csv('kms-dataset2d-XY.csv', sep=';', header=None)\n",
    "print(D.describe())\n",
    "data = np.array(D)\n",
    "X = data[:,:2]\n",
    "y = data[:,2].astype(int)\n",
    "N = X.shape[0]\n",
    "print(\"Nombre d'exemple\", N)\n",
    "NbClass = len(np.unique(y)) # nombre de classes à discriminer\n",
    "print(\"Nombre de classes:\", NbClass)\n",
    "\n",
    "# Affiche les données\n",
    "plt.scatter(X[:,0], X[:,1], c=y, cmap=plt.cm.get_cmap('tab10'))\n",
    "for i, txt in enumerate(y):\n",
    "    plt.annotate(txt, (X[i,0], X[i,1]))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Noter que les classes 0 et 2 se recouvrent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int64\n",
      "torch.int64\n"
     ]
    }
   ],
   "source": [
    "# Mise en forme des données\n",
    "# from_numpy donne un Tenseur à partir d'un tableau numpy\n",
    "x_data = torch.Tensor(X)\n",
    "y_data = torch.from_numpy(y)\n",
    "print(y.dtype)\n",
    "print(y_data.dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Un modèle linéaire\n",
    "\n",
    "Ce modèle comporte une couche, `nn.Linear`, et 4 cellules de sortie. Chaque cellule de sortie calcule donc un produit scalaire entre l'entrée et ses poids.\n",
    "\n",
    "La plus active indiquera la classe donnée par ce réseau."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ModeleLineaire(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(ModeleLineaire, self).__init__()\n",
    "        self.couche_lineaire = nn.Linear(2, NbClass)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.couche_lineaire(x)\n",
    "        return x\n",
    "\n",
    "modele = ModeleLineaire()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Le critère à optimiser (coût)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "# L'algorithme d'optimisation: \n",
    "optimizer = torch.optim.SGD(modele.parameters(), lr=0.01, momentum=0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.18724988400936127\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Boucle d'apprentissage\n",
    "batch_size = 100\n",
    "num_epochs = 50\n",
    "\n",
    "losses = []\n",
    "for epoch in range(num_epochs):\n",
    "    for beg_i in range(0, x_data.size(0), batch_size):\n",
    "        x_batch = x_data[ beg_i:beg_i + batch_size, :]\n",
    "        y_batch = y_data[ beg_i:beg_i + batch_size]\n",
    "        # remise à zéro des gradients\n",
    "        optimizer.zero_grad()\n",
    "        # forward:\n",
    "        outputs = modele(x_batch)\n",
    "        loss = criterion(outputs, y_batch)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        losses.append(loss.data.item())\n",
    "\n",
    "plt.plot(losses)\n",
    "print(losses[-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matrice de confusion (classification)\n",
    "Un matrice de confusion permet de visualiser les erreurs d'un classifieur: la cellule $(i, j)$ donne le nombre d'exemples appartenant à la classe $i$ et classés par le modèle comme étant de la classe $j$.\n",
    "\n",
    "On va s'en servir plusieurs fois, aussi nous définissons une fonction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2.  0.  0. 48.]\n",
      " [ 0. 50.  0.  0.]\n",
      " [ 0.  0.  0. 50.]\n",
      " [ 0.  0.  0. 50.]]\n"
     ]
    }
   ],
   "source": [
    "# Matrice de confusion, construite à la main\n",
    "# CM[b,c] = nombre d'exemples de la classe b classés dans la classe c\n",
    "\n",
    "def matrice_de_confusion( y, y_pred ):\n",
    "    # y et y_pred sont des vecteurs avec des indices de classes (0, .., nbClass)\n",
    "    NbClass = len(np.unique(y)) # nombre de classes\n",
    "    CM = np.zeros((NbClass,NbClass))\n",
    "    # ici la classe predite est donnée par le max de la sortie\n",
    "    for i in range(len(x_data)):\n",
    "        real_class = y[i]\n",
    "        pred_class = np.argmax(y_pred[i])\n",
    "        #print(\"real\", real_class, \"predicted\", pred_class)\n",
    "        CM[real_class, pred_class] += 1\n",
    "    return CM\n",
    "\n",
    "# Calcule les sorties prévues\n",
    "# et les converti en tableau numpy\n",
    "y_pred = net(x_data).detach().numpy()\n",
    "\n",
    "CM = matrice_de_confusion(y, y_pred)\n",
    "print(CM)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions:\n",
    "(répondre à chaque question dans une cellule différente)\n",
    "* Quelle classe est confondue avec quelle autre ?\n",
    "* Combien d'exemples sont-ils mal classés en tout ? Taux d'erreur en pourcentage ?\n",
    "* Quelle est la dernière valeur mesirée du coût ?\n",
    "* Si on augmente le nombre de passes (epochs), le coût diminu-t-il ? Est-ce que cela améliore la matrice de confusion ?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Un réseau de neurones\n",
    "\n",
    "Notre deuxième modèle comporte deux couches cachées, avec des activations non-linéaires de type ReLu.\n",
    "\n",
    "Le nombre de cellules par couche est donc:\n",
    "\n",
    "`2 -> N1 -> N2 -> NbClass`\n",
    "\n",
    "Ici `N1 = N2 = 5`.\n",
    "\n",
    "\n",
    "Le constructeur `__init__` crée 3 couches linéaires, utilisées dans la méthode `forward`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Le modèle:\n",
    "N1 = 2\n",
    "N2 = 3\n",
    "\n",
    "class Net(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Net, self).__init__()\n",
    "        self.fc1 = nn.Linear(2, N1)\n",
    "        self.fc2 = nn.Linear(N1, N2)\n",
    "        self.fc3 = nn.Linear(N2, NbClass)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.relu(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "net = Net()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Le critère à optimiser (coût)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "# L'algorithme d'optimisation: \n",
    "optimizer = torch.optim.SGD(net.parameters(), lr=0.01, momentum=0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8031966686248779\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Boucle d'apprentissage\n",
    "batch_size = 100\n",
    "num_epochs = 100\n",
    "\n",
    "losses = []\n",
    "for epoch in range(num_epochs):\n",
    "    for beg_i in range(0, x_data.size(0), batch_size):\n",
    "        x_batch = x_data[ beg_i:beg_i + batch_size, :]\n",
    "        y_batch = y_data[ beg_i:beg_i + batch_size]\n",
    "        # remise à zéro des gradients\n",
    "        optimizer.zero_grad()\n",
    "        # forward:\n",
    "        outputs = net(x_batch)\n",
    "        loss = criterion(outputs, y_batch)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        losses.append(loss.data.item())\n",
    "\n",
    "plt.plot(losses)\n",
    "print(losses[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2.  0.  0. 48.]\n",
      " [ 0. 50.  0.  0.]\n",
      " [ 0.  0.  0. 50.]\n",
      " [ 0.  0.  0. 50.]]\n"
     ]
    }
   ],
   "source": [
    "# Matrice de confusion\n",
    "y_pred = net(x_data).detach().numpy()\n",
    "\n",
    "CM = matrice_de_confusion(y, y_pred)\n",
    "print(CM)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions\n",
    "* Quelle est la dernière valeur du coût ?\n",
    "* Quelles sont les classes confondues ?\n",
    "* Combien d'erreurs ? Taux en pourcentage ?\n",
    "* Tenter d'améliorer le modèle: varier N1 et N2. Pour chaque configuration, relever la valeur du coût, les nombres et taux d'erreurs de classification. Quelle est votre architecture optimale ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Questions subsidiaires\n",
    "* Pour le modèle linéaire, extraire les poids et tracer les frontières sur le graphique 2d.\n",
    "* Essayer d'autres modèles classiques: kNN, logistique, SVM, et comparer les résultats."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
